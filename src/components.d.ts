/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import { ScaniaHeader as ScaniaHeader } from './brands/scania/components/scania-header/component';

interface HTMLScaniaHeaderElement extends ScaniaHeader, HTMLElement {
}
declare var HTMLScaniaHeaderElement: {
  prototype: HTMLScaniaHeaderElement;
  new (): HTMLScaniaHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "scania-header": HTMLScaniaHeaderElement;
  }
  interface ElementTagNameMap {
      "scania-header": HTMLScaniaHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "scania-header": JSXElements.ScaniaHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface ScaniaHeaderAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          siteName?: string,
          items?: any
      }
  }
}

import { ScaniaPanel as ScaniaPanel } from './brands/scania/components/scania-panel/component';

interface HTMLScaniaPanelElement extends ScaniaPanel, HTMLElement {
}
declare var HTMLScaniaPanelElement: {
  prototype: HTMLScaniaPanelElement;
  new (): HTMLScaniaPanelElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "scania-panel": HTMLScaniaPanelElement;
  }
  interface ElementTagNameMap {
      "scania-panel": HTMLScaniaPanelElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "scania-panel": JSXElements.ScaniaPanelAttributes;
      }
  }
  namespace JSXElements {
      export interface ScaniaPanelAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { ScaniaUi as ScaniaUi } from './brands/scania/global/component';

interface HTMLScaniaUiElement extends ScaniaUi, HTMLElement {
}
declare var HTMLScaniaUiElement: {
  prototype: HTMLScaniaUiElement;
  new (): HTMLScaniaUiElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "scania-ui": HTMLScaniaUiElement;
  }
  interface ElementTagNameMap {
      "scania-ui": HTMLScaniaUiElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "scania-ui": JSXElements.ScaniaUiAttributes;
      }
  }
  namespace JSXElements {
      export interface ScaniaUiAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { CorporateFooter as CorporateFooter } from './corporate/components/corporate-footer/component';

interface HTMLCorporateFooterElement extends CorporateFooter, HTMLElement {
}
declare var HTMLCorporateFooterElement: {
  prototype: HTMLCorporateFooterElement;
  new (): HTMLCorporateFooterElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "corporate-footer": HTMLCorporateFooterElement;
  }
  interface ElementTagNameMap {
      "corporate-footer": HTMLCorporateFooterElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "corporate-footer": JSXElements.CorporateFooterAttributes;
      }
  }
  namespace JSXElements {
      export interface CorporateFooterAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          items?: any
      }
  }
}

import { CorporateHeader as CorporateHeader } from './corporate/components/corporate-header/component';

interface HTMLCorporateHeaderElement extends CorporateHeader, HTMLElement {
}
declare var HTMLCorporateHeaderElement: {
  prototype: HTMLCorporateHeaderElement;
  new (): HTMLCorporateHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "corporate-header": HTMLCorporateHeaderElement;
  }
  interface ElementTagNameMap {
      "corporate-header": HTMLCorporateHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "corporate-header": JSXElements.CorporateHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface CorporateHeaderAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          siteName?: string,
          items?: any
      }
  }
}

import { MainNavigation as MainNavigation } from './corporate/components/main-navigation/component';

interface HTMLMainNavigationElement extends MainNavigation, HTMLElement {
}
declare var HTMLMainNavigationElement: {
  prototype: HTMLMainNavigationElement;
  new (): HTMLMainNavigationElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "main-navigation": HTMLMainNavigationElement;
  }
  interface ElementTagNameMap {
      "main-navigation": HTMLMainNavigationElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "main-navigation": JSXElements.MainNavigationAttributes;
      }
  }
  namespace JSXElements {
      export interface MainNavigationAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          items?: any
      }
  }
}

import { CorporateUi as CorporateUi } from './corporate/global/component';

interface HTMLCorporateUiElement extends CorporateUi, HTMLElement {
}
declare var HTMLCorporateUiElement: {
  prototype: HTMLCorporateUiElement;
  new (): HTMLCorporateUiElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "corporate-ui": HTMLCorporateUiElement;
  }
  interface ElementTagNameMap {
      "corporate-ui": HTMLCorporateUiElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "corporate-ui": JSXElements.CorporateUiAttributes;
      }
  }
  namespace JSXElements {
      export interface CorporateUiAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          brand?: string
      }
  }
}

